

import java.util.Scanner;

class fcfs1 {
    public static void main(String args[]) {
        int burst_time[], process[], waiting_time[], tat[], i, j, n, total = 0, pos, temp;
        float wait_avg, TAT_avg;
        Scanner s = new Scanner(System.in);

        System.out.print("Enter number of processes: ");
        n = s.nextInt();

        process = new int[n];
        burst_time = new int[n];
        waiting_time = new int[n];
        tat = new int[n];

        System.out.println("\nEnter Burst time:");
        for (i = 0; i < n; i++) {
            System.out.print("\nProcess[" + (i + 1) + "]: ");
            burst_time[i] = s.nextInt();;
            process[i] = i + 1; // Process Number
        }

        // First process has 0 waiting time
        waiting_time[0] = 0;

        // Calculate waiting time
        for (i = 1; i < n; i++) {
            waiting_time[i] = 0;
            for (j = 0; j < i; j++)
                waiting_time[i] += burst_time[j];
            total += waiting_time[i];
        }

        // Calculating Average waiting time
        wait_avg = (float) total / n;
        total = 0;

        System.out.println("\nProcess\t Burst Time \tWaiting Time\tTurnaround Time");
        for (i = 0; i < n; i++) {
            tat[i] = burst_time[i] + waiting_time[i];
            total += tat[i]; // Calculating Turnaround Time
            System.out.println("\np" + process[i] + "\t\t" + burst_time[i] + "\t\t" + waiting_time[i] + "\t\t" + tat[i]);
        }

        // Calculation of Average Turnaround Time
        TAT_avg = (float) total / n;

        System.out.println("\n\nAverage Waiting Time: " + wait_avg);
        System.out.println("Average Turnaround Time: " + TAT_avg);
    }
}




-----------------------------------------------------------------------------------------------------------------------------



import java.util.Scanner;

public class Priority {
    private int need[][], allocate[][], max[][], avail[][], np, nr;

    private void input() {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter no. of processes and resources : ");
        np = sc.nextInt(); // no. of processes
        nr = sc.nextInt(); // no. of resources
        need = new int[np][nr]; // initializing arrays
        max = new int[np][nr];
        allocate = new int[np][nr];
        avail = new int[1][nr]; // available matrix
        System.out.println("Enter allocation matrix -->");
        for (int i = 0; i < np; i++)
            for (int j = 0; j < nr; j++)
                allocate[i][j] = sc.nextInt(); // allocation matrix
        System.out.println("Enter max matrix -->");
        for (int i = 0; i < np; i++)
            for (int j = 0; j < nr; j++)
                max[i][j] = sc.nextInt(); // max matrix
        System.out.println("Enter available matrix -->");
        for (int j = 0; j < nr; j++)
            avail[0][j] = sc.nextInt(); // available matrix
        sc.close();
    }

    private int[][] calc_need() {
        need = new int[np][nr];
        for (int i = 0; i < np; i++)
            for (int j = 0; j < nr; j++)
                need[i][j] = max[i][j] - allocate[i][j];
        return need;
    }

    private boolean check(int i) {
        // checking if all resources for the ith process can be allocated
        for (int j = 0; j < nr; j++)
            if (avail[0][j] < need[i][j])
                return false;
        return true;
    }

    public void isSafe() {
        input();
        calc_need();
        boolean done[] = new boolean[np];
        int j = 0;
        while (j < np) {
            // until all processes are allocated
            boolean allocated = false;
            for (int i = 0; i < np; i++)
                if (!done[i] && check(i)) {
                    // trying to allocate
                    for (int k = 0; k < nr; k++)
                        avail[0][k] = avail[0][k] - need[i][k] + max[i][k];
                    System.out.println("Allocated process : " + i);
                    allocated = done[i] = true;
                    j++;
                }
            if (!allocated)
                break; // if no allocation
        }
        if (j == np)
            // if all processes are allocated
            System.out.println("\nSafely allocated");
        else
            System.out.println("All processes can't be allocated safely");
    }

    public static void main(String[] args) {
        new Priority().isSafe();
    }
}


---------------------------------------------------------------------------------------------------------------



import java.util.Scanner;

import java.util.*;
import java.io.*;
class Round
{
	public static void main(String args[])
	{
		int Process[]=new int[10];
		int a[]=new int[10];
		int Arrival_time[]=new int[10];
		int Burst_time[]=new int[10];
		int WT[]=new int[10];
		int TAT[]=new int[10];
		int Pno,sum=0;;
		int TimeQuantum;
		
System.out.println("\nEnter the no. of Process::");
		Scanner sc=new Scanner(System.in);
		Pno=sc.nextInt();
		System.out.println("\nEnter each process::");
		for(int i=0;i<Pno;i++)
		{
			Process[i]=sc.nextInt();
		}
		
System.out.println("\nEnter the Burst Time of each process::");
		for(int i=0;i<Pno;i++)
		{
			Burst_time[i]=sc.nextInt();
		}
System.out.println("\nEnter the Time Quantum::");
TimeQuantum=sc.nextInt();		
		do{
	    	for(int i=0;i<Pno;i++)
	    	{
	     		if(Burst_time[i]>TimeQuantum)
	     		{
	    		  	Burst_time[i]-=TimeQuantum; 
	      		  	for(int j=0;j<Pno;j++)
	      			{
	       				if((j!=i)&&(Burst_time[j]!=0))
	        			WT[j]+=TimeQuantum;
	         		}
	          	}
	           	else
	           	{ 
	           		for(int j=0;j<Pno;j++)
	           		{
	            			if((j!=i)&&(Burst_time[j]!=0))
	             			WT[j]+=Burst_time[i];
	              		} 
	              		Burst_time[i]=0; 
	                } 
	       }
	               sum=0; 
	               for(int k=0;k<Pno;k++) 
            		sum=sum+Burst_time[k];
	    } while(sum!=0); 
	                
	             for(int i=0;i<Pno;i++)
	                	 TAT[i]=WT[i]+a[i];
	               System.out.println("process\t\tBT\tWT\tTAT");
	               for(int i=0;i<Pno;i++)
	               {
	                    System.out.println("process"+(i+1)+"\t"+a[i]+"\t"+WT[i]+"\t"+TAT[i]);
	               } 
	                     float avg_wt=0;
	               float avg_tat=0;
	               for(int j=0;j<Pno;j++)
	               { 
	                       avg_wt+=WT[j]; 
	               } 
	               for(int j=0;j<Pno;j++)
	               { 
	                       avg_tat+=TAT[j]; 
	               } 
	                 System.out.println("average waiting time "+(avg_wt/Pno)+"\n Average turn around time"+(avg_tat/Pno)); 		
	}		
}



---------------------------------------------------------------------------------------------------------------------------------


import java.util.Scanner;

class sjf
{
public static void main(String args[]) 
{
int burst_time[],process[],waiting_time[],tat[],arr_time[],completion_time[],i,j,n,total=0,total_comp=0,pos,temp;
float wait_avg,TAT_avg;
Scanner s = new Scanner(System.in);
 System.out.print("Enter number of process: ");
n = s.nextInt();
 process = new int[n];
burst_time = new int[n];
waiting_time = new int[n];
arr_time=new int[n];
tat = new int[n];
completion_time=new int[n];
 
//burst time
System.out.println("\nEnter Burst time:");
for(i=0;i<n;i++)
{
System.out.print("\nProcess["+(i+1)+"]: ");
burst_time[i] = s.nextInt();;
process[i]=i+1; //Process Number
}

//arrival time
System.out.println("\nEnter arrival time:");
for(i=0;i<n;i++)
{
System.out.print("\nProcess["+(i+1)+"]: ");
arr_time[i] = s.nextInt();;
process[i]=i+1; //Process Number
}
 
//Sorting
for(i=0;i<n;i++)
{
pos=i;
for(j=i+1;j<n;j++)
{
if(burst_time[j]<burst_time[pos])
pos=j;
}
 
temp=burst_time[i];
burst_time[i]=burst_time[pos];
burst_time[pos]=temp;
 
temp=process[i];
process[i]=process[pos];
process[pos]=temp;

System.out.println("process"+process[i]);
}
//completion  time new 
for(i=1;i<n;i++)
{
completion_time[i]=0;
for(j=0;j<i;j++)
completion_time[i]+=burst_time[j];
 total_comp+=completion_time[i];
}
 
//First process has 0 waiting  time
waiting_time[0]=0;
//calculate waiting time
for(i=1;i<n;i++)
{
waiting_time[i]=0;
for(j=0;j<i;j++)
waiting_time[i]+=burst_time[j];
total+=waiting_time[i];
}
 
 
//Calculating Average waiting time
wait_avg=(float)total/n;
total=0;
 
System.out.println("\nPro_number\t Burst Time \tcompletion_time\tWaiting Time\tTurnaround Time");
for(i=0;i<n;i++)
{
tat[i]=burst_time[i]+waiting_time[i];
 //Calculating Turnaround Time
total+=tat[i];
System.out.println("\n"+process[i]+"\t\t "+burst_time[i]+"\t\t "+completion_time[i]+"\t\t"+waiting_time[i]+"\t\t "+tat[i]);
}
 
//Calculation of Average Turnaround Time
TAT_avg=(float)total/n;
System.out.println("\n\nAWT: "+wait_avg);
System.out.println("\nATAT: "+TAT_avg);
 
}
}


